---
name: composition-over-inheritance
description: AI defaults to inheritance when composition would be better
category: universal
severity: warning
triggers:
  - type: regex
    pattern: "class\\s+\\w+\\s*\\([^)]*\\):"
    context: python_inheritance
  - type: regex
    pattern: "class\\s+\\w+\\s+extends\\s+\\w+"
    context: javascript_inheritance
  - type: regex
    pattern: "extends\\s+\\w+"
    context: general_inheritance
examples:
  bad: |
    # AI generates this - INHERITANCE HELL
    class Animal:
        def __init__(self, name):
            self.name = name
        def eat(self):
            print("eating")
    
    class Dog(Animal):
        def __init__(self, name, breed):
            super().__init__(name)
            self.breed = breed
        def bark(self):
            print("woof")
    
    class WorkingDog(Dog):
        def __init__(self, name, breed, job):
            super().__init__(name, breed)
            self.job = job
        def work(self):
            print("working")
  good: |
    # AILint enforces this - COMPOSITION
    class Animal:
        def __init__(self, name, behaviors):
            self.name = name
            self.behaviors = behaviors
        
        def perform(self, action):
            if action in self.behaviors:
                self.behaviors[action]()
    
    # Behavior composition
    def create_dog_behaviors(breed):
        return {
            "eat": lambda: print("eating"),
            "bark": lambda: print("woof"),
            "breed_info": lambda: print(f"Breed: {breed}")
        }
    
    # Usage - flexible, testable, composable
    dog_behaviors = create_dog_behaviors("German Shepherd")
    working_dog = Animal("Rex", dog_behaviors)
---

# Composition Over Inheritance

## üéØ Rule Purpose

**Prevents AI from defaulting to inheritance when composition is more appropriate.**

This rule implements the fundamental principle "favor composition over inheritance" by detecting inheritance patterns and steering toward composition instead.

## üö´ AI Limitation Resolved

**Problem**: AI defaults to inheritance because:
- The relationship is "has-a" not "is-a"
- Behavior needs to be mixed and matched
- Testing requires mocking dependencies
- Future changes need flexibility

**Solution**: This state machine detects inheritance patterns and enforces composition constraints.

## ‚ö° How It Works

1. **Detection**: Scans for inheritance keywords and patterns
2. **Analysis**: Evaluates if relationship is truly "is-a" or could be "has-a"
3. **Constraint**: Suggests composition patterns and dependency injection
4. **Validation**: Ensures output uses composition over inheritance

## üí° Key Constraints Applied

- **Dependency Injection**: Force constructor/parameter injection
- **Behavior Composition**: Compose behaviors instead of inheriting them
- **Strategy Pattern**: Use for behavior variation
- **Depth Limiting**: Max 2-3 inheritance levels
- **Loose Coupling**: Prefer composition for flexibility

## üéØ Expected Results

After applying this rule, your AI will generate:
- ‚úÖ Loosely coupled, testable code
- ‚úÖ Flexible composition patterns
- ‚úÖ Dependency injection by default
- ‚úÖ Strategy pattern for behavior variation
- ‚ùå No deep inheritance hierarchies
- ‚ùå No tightly coupled dependencies