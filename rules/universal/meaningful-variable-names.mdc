---
name: meaningful-variable-names
description: AI generates vague variable names like 'data', 'result', 'info' instead of descriptive names
category: universal
severity: info
triggers:
  - type: regex
    pattern: "\\b(data|result|response|info|temp|obj|val|item)\\s*="
    context: generic_variable_assignment
  - type: regex
    pattern: "\\bvar\\s+(data|result|info|temp)\\b"
    context: javascript_generic_variables
  - type: regex
    pattern: "let\\s+(data|result|info|temp)\\s*="
    context: modern_javascript_generic_variables
examples:
  bad: |
    # AI generates this - MEANINGLESS NAMES
    def process_user_data():
        # What kind of data? From where?
        data = fetch_user_info()
        
        # What result? Result of what?
        result = []
        
        # What response? API response? User response?
        response = api_call()
        
        # Info about what?
        info = response.get('info')
        
        # What items? Users? Products? Orders?
        for item in data:
            # What object? What temp value?
            obj = transform(item)
            temp = calculate(obj)
            result.append(temp)
        
        return result
  good: |
    # AILint enforces this - INTENTION-REVEALING NAMES
    def process_user_data():
        # Clear: user profile data from database
        user_profiles = fetch_user_info()
        
        # Clear: processed profiles ready for export
        processed_profiles = []
        
        # Clear: response from external API
        api_response = api_call()
        
        # Clear: user preferences from API
        user_preferences = api_response.get('preferences')
        
        # Clear: individual user profile being processed
        for user_profile in user_profiles:
            # Clear: profile enriched with preferences
            enriched_profile = enrich_with_preferences(user_profile)
            # Clear: final score calculated for user
            user_engagement_score = calculate_engagement(enriched_profile)
            processed_profiles.append({
                'profile': enriched_profile,
                'score': user_engagement_score
            })
        
        return processed_profiles
---

# Meaningful Variable Names

## üéØ Rule Purpose

**Eliminates vague variable names by enforcing intention-revealing, context-specific naming.**

This rule detects generic variable names like 'data', 'result', 'info' and forces descriptive names that clearly communicate purpose and context.

## üö´ AI Limitation Resolved

**Problem**: AI generates meaningless variable names because:
- Training data contains many examples with lazy naming
- Generic names appear simpler in isolated code snippets
- AI doesn't understand business domain context
- No awareness of code readability impact

**Solution**: This rule detects generic naming patterns and enforces descriptive, intention-revealing names.

## ‚ö° How It Works

1. **Detection**: Scans for generic variable names and vague naming patterns
2. **Analysis**: Analyzes variable context, purpose, and business domain
3. **Constraint**: Enforces descriptive naming that reveals intention
4. **Validation**: Ensures names clearly communicate purpose and context

## üí° Key Constraints Applied

- **No Generic Names**: Eliminate 'data', 'result', 'response', 'info', 'temp'
- **Context-Specific**: Names must reflect business domain and purpose
- **Intention-Revealing**: Variables explain why they exist and how they're used
- **Searchable Names**: Prefer descriptive names over abbreviations
- **Domain Terminology**: Use business-specific vocabulary

## üéØ Expected Results

After applying this rule, your AI will generate:
- ‚úÖ Variables that clearly indicate their purpose
- ‚úÖ Context-specific naming using domain terminology
- ‚úÖ Self-documenting code that reduces need for comments
- ‚úÖ Consistent naming patterns across the codebase
- ‚ùå No generic 'data', 'result', 'response' variables
- ‚ùå No single-letter variables outside simple loops
- ‚ùå No abbreviations that require mental decoding