---
name: explicit-error-messages
description: AI generates vague error messages like 'Error', 'Invalid input' instead of specific, actionable messages
category: universal
severity: warning
triggers:
  - type: regex
    pattern: "raise Exception\\(\"Error\"\\)|throw new Error\\(\"Error\"\\)"
    context: generic_error_messages
  - type: regex
    pattern: "ValueError\\(\"Invalid\"\\)|Error\\(\"Invalid input\"\\)"
    context: vague_validation_errors
  - type: regex
    pattern: "throw.*\"Something went wrong\"|raise.*\"Bad data\""
    context: unhelpful_messages
  - type: regex
    pattern: "Exception\\(\"Error\"\\)|Error\\(\"Failed\"\\)"
    context: single_word_errors
examples:
  bad: |
    # AI generates this - USELESS ERROR MESSAGES
    def validate_email(email):
        if not email:
            raise ValueError("Error")  # What error? Why?
        
        if "@" not in email:
            raise ValueError("Invalid input")  # Invalid how?
        
        return True
    
    def process_payment(amount, card):
        if amount <= 0:
            raise Exception("Bad amount")  # How bad? What's valid?
        
        if not card:
            raise Exception("Invalid card")  # What's wrong with it?
        
        # API call fails
        try:
            result = payment_api.charge(amount, card)
        except:
            raise Exception("Payment failed")  # Why? Network? Declined?
    
    // JavaScript
    function validateAge(age) {
        if (age < 0) {
            throw new Error("Invalid");  // Invalid how?
        }
        if (age > 150) {
            throw new Error("Error");  // What error?
        }
    }
  good: |
    # AILint enforces this - SPECIFIC, ACTIONABLE ERROR MESSAGES
    def validate_email(email):
        if not email:
            raise ValueError("Email address is required and cannot be empty")
        
        if "@" not in email:
            raise ValueError(f"Email '{email}' must contain '@' symbol. Example: user@domain.com")
        
        if "." not in email.split("@")[1]:
            raise ValueError(f"Email domain '{email.split('@')[1]}' must contain at least one dot. Example: user@example.com")
        
        return True
    
    def process_payment(amount, card):
        if amount <= 0:
            raise ValueError(f"Payment amount must be positive. Received: {amount}. Minimum amount: $0.01")
        
        if not card or not card.get('number'):
            raise ValueError("Credit card information is required. Please provide card number, expiry, and CVV")
        
        try:
            result = payment_api.charge(amount, card)
        except NetworkError as e:
            raise PaymentError(f"Payment processing temporarily unavailable. Please try again in a few moments. Error: {e}")
        except CardDeclinedError as e:
            raise PaymentError(f"Payment declined by bank. Reason: {e.decline_reason}. Please check card details or try a different payment method")
    
    // JavaScript
    function validateAge(age) {
        if (age < 0) {
            throw new Error(`Age cannot be negative. Received: ${age}. Please provide a valid age between 0 and 150.`);
        }
        if (age > 150) {
            throw new Error(`Age ${age} exceeds maximum realistic age of 150. Please verify the input.`);
        }
    }
---

# Explicit Error Messages

## üéØ Rule Purpose

**Eliminates vague error messages by enforcing specific, actionable error descriptions.**

This rule detects generic error messages like 'Error', 'Invalid input' and forces explicit messages that clearly explain what went wrong and how to fix it.

## üö´ AI Limitation Resolved

**Problem**: AI generates useless error messages because:
- Training data contains many examples with lazy error handling
- Generic messages appear simpler in code examples
- AI doesn't understand the debugging and user experience impact
- No awareness of actionable guidance principles

**Solution**: This rule detects vague error patterns and enforces specific, helpful error messages.

## ‚ö° How It Works

1. **Detection**: Scans for generic error messages and vague exception patterns
2. **Analysis**: Analyzes failure context, user needs, and debugging requirements
3. **Constraint**: Enforces specific error descriptions with actionable guidance
4. **Validation**: Ensures error messages provide clear context and next steps

## üí° Key Constraints Applied

- **No Generic Messages**: Eliminate 'Error', 'Invalid input', 'Something went wrong'
- **Specific Context**: Include what went wrong and why
- **Actionable Guidance**: Provide clear steps to resolve the issue
- **Debugging Information**: Include relevant values and constraints
- **User-Friendly Language**: Clear, helpful tone without technical jargon

## üéØ Expected Results

After applying this rule, your AI will generate:
- ‚úÖ Error messages that clearly explain what went wrong
- ‚úÖ Actionable guidance for resolving issues
- ‚úÖ Context-specific validation messages
- ‚úÖ Debugging information for developers
- ‚ùå No generic 'Error' or 'Invalid input' messages
- ‚ùå No vague exceptions without context
- ‚ùå No unhelpful error descriptions