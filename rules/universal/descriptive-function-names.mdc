---
name: descriptive-function-names
description: AI generates vague function names like 'process', 'handle', 'update' instead of intention-revealing names
category: universal
severity: info
triggers:
  - type: regex
    pattern: "def (process|handle|update|get|set|manage|do)\\("
    context: python_generic_functions
  - type: regex
    pattern: "function (process|handle|update|get|set|manage|do)\\("
    context: javascript_generic_functions
  - type: regex
    pattern: "(public|private)\\s+\\w+\\s+(process|handle|update|get|set|manage|do)\\("
    context: java_csharp_generic_methods
examples:
  bad: |
    # AI generates this - MEANINGLESS FUNCTION NAMES
    def process(data):
        # Process what? How? What's the outcome?
        return transform(data)
    
    def handle(request):
        # Handle how? What kind of handling?
        return response
    
    def update(user):
        # Update what about the user? Name? Email? Password?
        user.save()
    
    def get(id):
        # Get what? User? Product? Order?
        return database.find(id)
    
    def validate(input):
        # Validate what? Email? Password? Credit card?
        return is_valid
    
    def calculate(values):
        # Calculate what? Sum? Average? Score?
        return result
  good: |
    # AILint enforces this - INTENTION-REVEALING FUNCTION NAMES
    def transform_user_profile_to_display_format(user_profile):
        # Clear: transforms user data for UI display
        return format_for_ui(user_profile)
    
    def handle_payment_processing_request(payment_request):
        # Clear: processes payment through payment gateway
        return process_payment_with_stripe(payment_request)
    
    def update_user_email_address(user, new_email):
        # Clear: specifically updates email, validates first
        validate_email_format(new_email)
        user.email = new_email
        user.save()
    
    def get_user_account_by_id(user_id):
        # Clear: retrieves user account from database
        return user_repository.find_by_id(user_id)
    
    def validate_credit_card_number(card_number):
        # Clear: validates credit card using Luhn algorithm
        return luhn_algorithm_check(card_number)
    
    def calculate_monthly_subscription_revenue(subscriptions):
        # Clear: calculates total monthly recurring revenue
        return sum(sub.monthly_price for sub in subscriptions if sub.is_active)
---

# Descriptive Function Names

## üéØ Rule Purpose

**Eliminates vague function names by enforcing intention-revealing, behavior-specific naming.**

This rule detects generic function names like 'process', 'handle', 'update' and forces descriptive names that clearly communicate what the function does and why.

## üö´ AI Limitation Resolved

**Problem**: AI generates meaningless function names because:
- Training data contains many examples with lazy function naming
- Generic verbs appear simpler in code examples
- AI doesn't understand the specific behavior being implemented
- No awareness of function's role in business domain

**Solution**: This rule detects generic function naming and enforces descriptive, behavior-revealing names.

## ‚ö° How It Works

1. **Detection**: Scans for generic function names and vague naming patterns
2. **Analysis**: Analyzes function purpose, inputs, outputs, and side effects
3. **Constraint**: Enforces descriptive naming with action verbs and specific outcomes
4. **Validation**: Ensures function names clearly communicate behavior and intent

## üí° Key Constraints Applied

- **No Generic Names**: Eliminate 'process', 'handle', 'update', 'get', 'set'
- **Action + Subject**: Functions must specify what action on what subject
- **Behavior Revelation**: Names predict what the function will do
- **Domain Terminology**: Use business-specific action verbs
- **Side Effect Clarity**: Names indicate if function modifies state

## üéØ Expected Results

After applying this rule, your AI will generate:
- ‚úÖ Function names that clearly describe behavior and outcome
- ‚úÖ Predictable function behavior based on name alone
- ‚úÖ Self-documenting code with obvious function purposes
- ‚úÖ Consistent naming patterns using domain terminology
- ‚ùå No generic 'process', 'handle', 'manage' functions
- ‚ùå No ambiguous function names requiring documentation
- ‚ùå No single-word function names without context